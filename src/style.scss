@import 'reset-css/reset.css';

/* Fonts */
@font-face {
	font-weight: 400;
	font-style: normal;
	font-family: Entypo;
	src: url('fonts/entypo.woff') format('woff');
}

/* Pervasives */
* {
	user-select: none;
}

html,
body {
	overflow: hidden;
	height: 100%;
}

/* Preloader */
.preloader {
	opacity: 0;
	speak: none;

	&__entypo {
		font-family: Entypo;
	}
}

/* Landscape */
$sky-speed: 300s;
$sky-shades: #c99684, #addaf8, #2996f8, #1c3e69, #34365c;
$sky-background-size: length($sky-shades) * 100%;

@keyframes scroll-sky {

	0% {
		background-position: 0 0;
	}

	100% {
		background-position: 0 $sky-background-size;
	}
}

@keyframes shade-earth { // Unfortunately, can't programmatically create steps in @keyframes with Sass

	0% {
		box-shadow: inset 0 100px 100px rgba(200, 200, 25, 0.5);
	}

	20% {
		box-shadow: inset 0 100px 100px rgba(255, 255, 25, 0.5);
	}

	40% {
		box-shadow: inset 0 100px 100px rgba(150, 150, 25, 0.5);
	}

	60% {
		box-shadow: inset 0 100px 100px rgba(50, 50, 25, 0.5);
	}

	80% {
		box-shadow: inset 0 100px 100px rgba(100, 100, 25, 0.5);
	}

	100% {
		box-shadow: inset 0 100px 100px rgba(200, 200, 25, 0.5);
	}
}

.landscape {
	position: absolute;
	top: 0;
	display: flex;
	flex-direction: column;
	width: 100%;
	height: 100%;

	&__sky {
		flex-grow: 1;
		width: 100%;
		background-image: linear-gradient(to bottom, $sky-shades, nth($sky-shades, 1)); // End with first value repeated
		background-size: auto $sky-background-size;
		background-position: 100% 0;
		animation-name: scroll-sky;
		animation-duration: $sky-speed;
		animation-iteration-count: infinite;
		animation-fill-mode: forwards;
		animation-timing-function: linear;
	}

	&__earth {
		width: 100%;
		height: 200px;
		background-color: #4d5a22;
		animation-name: shade-earth;
		animation-duration: $sky-speed / 4; // Sync earth transition with sky
		animation-iteration-count: infinite;
		animation-fill-mode: forwards;
		animation-timing-function: linear;
	}
}

/* TV */
.tv {
	position: absolute;
	bottom: 100px;
	left: 50%;

	&__screen {
		position: absolute;
		z-index: 1;
		bottom: 6px;
		left: 5px;
		width: 190px;
		height: 140px;
		background-size: cover;

		&[data-channel='static'] {
			background-image: url('images/static.gif');
		}

		&[data-channel='maybe'] {
			background-image: url('images/maybe.gif');
		}

		&[data-channel='eye'] {
			background-image: url('images/eye.gif');
		}
	}

	&__set {
		position: relative;
		z-index: 2;
		width: 250px;
	}
}

/* Art body */
.art-body {
	position: absolute;
	bottom: 140px;
	left: 50%;
	z-index: 3;
	margin-left: 105px;
	width: 145px;
}

/* Art head */
@keyframes drop-head {

	0% {
		top: var(--head-drop-ceiling);
	}

	100% {
		top: var(--head-drop-floor);
		transform: rotate(var(--head-tilt-angle));
	}
}

.art-head {
	position: absolute;
	bottom: 400px;
	left: calc(50% + 158px);
	z-index: 5;
	display: block;
	width: 54px;
	height: 94px;
	background-size: contain;
	background-repeat: no-repeat;
	cursor: pointer;

	&[data-face='center'] {
		background-image: url('images/center.png');
	}

	&[data-face='up'] {
		background-image: url('images/up.png');
		margin-bottom: -8px;
		margin-left: 8px;
	}

	&[data-face='right'] {
		background-image: url('images/right.png');
		margin-left: 3px;
	}

	&[data-face='down'] {
		background-image: url('images/down.png');
		margin-bottom: -8px;
	}

	&[data-face='left'] {
		background-image: url('images/left.png');
		margin-left: -1px;
	}

	&[data-face='ahh'] {
		background-image: url('images/ahh.png');
	}

	&--dropped {
		animation-name: drop-head; // Use animation instead of transition to not conflict with Draggabilly
		animation-duration: 0.5s;
		animation-iteration-count: 1;
		animation-fill-mode: forwards;
		animation-timing-function: ease-in;
	}

	&--faded {
		transition: opacity 2.5s linear;
		opacity: 0;
	}
}

/* Rubble */
/* stylelint-disable */
$rubble-bit-coord-rows: ((5, 7)),
                        ((4, 6), (6, 8)),
                        ((3 ,5), (5, 7), (7, 9)),
                        ((2, 4), (4, 6), (6, 8), (8, 10)),
                        ((1, 3), (3, 5), (5, 7), (7, 9), (9, 11));
/* stylelint-enable */

.rubble {
	position: absolute;
	z-index: 6;
	display: grid;
	grid-template-columns: repeat(10, 10px);
	grid-template-rows: repeat(5, 14px);
	color: #fff;
	font-weight: 400;
	font-size: 40px;
	font-family: Entypo;
	text-align: center;
	text-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
	line-height: 0; // Align symbols with tops of containers instead of baselines

	&__bit {
		opacity: 0;
		transition: opacity 2s;
		$rubble-bit-total: 0;

		@for $i from 1 through length($rubble-bit-coord-rows) {
			$rubble-bit-coord-row: nth($rubble-bit-coord-rows, $i);

			// If the first item is a number instead of a list, define rule (Sass collapses nested single-item lists)
			@if type-of(nth($rubble-bit-coord-row, 1)) == 'number' {
				$rubble-bit-coord: $rubble-bit-coord-row;
				$rubble-bit-total: $rubble-bit-total + 1;

				&:nth-of-type(#{$rubble-bit-total}) {
					grid-column-start: nth($rubble-bit-coord, 1);
					grid-column-end: nth($rubble-bit-coord, 2);
					grid-row-start: $i;
					grid-row-end: $i;
				}
			}

			@else {

				@for $j from 1 through length($rubble-bit-coord-row) {
					$rubble-bit-coord: nth($rubble-bit-coord-row, $j);
					$rubble-bit-total: $rubble-bit-total + 1;

					&:nth-of-type(#{$rubble-bit-total}) {
						grid-column-start: nth($rubble-bit-coord, 1);
						grid-column-end: nth($rubble-bit-coord, 2);
						grid-row-start: $i;
						grid-row-end: $i;
					}
				}
			}
		}

		&--appeared {
			opacity: 1;
		}
	}
}

/* Dog */
.dog {
	position: fixed;
	bottom: -30px;
	left: -200px;
	z-index: 7;
	width: 200px;
	transition: left 7s linear;

	&--walked {
		left: 100%;
	}
}

/* Head change grid */
.head-change-grid {
	position: absolute;
	top: 0;
	left: 0;
	z-index: 4;
	width: 100%;
	height: 100%;

	&--disabled {
		pointer-events: none;
	}

	&__trigger {

		&--center {
			width: 80px;
			height: 120px;
		}

		&--down {
			height: 385px;
		}

		&--left {
			width: calc(50vw + 145px); // Account for figure offset
		}
	}
}